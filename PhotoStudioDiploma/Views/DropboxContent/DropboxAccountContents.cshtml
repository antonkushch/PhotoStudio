@model PhotoStudioDiploma.Models.DropboxFolderContentsViewModel
@{
    ViewBag.Title = "DropboxAccountContents";
}

<h2>The contents of my Dropbox account.</h2>


<div id="folderContents">
    <div class="dl-horizontal">
        @foreach (var prevFolder in Model.PreviousFolders)
        {
            <a id="goBackToFolder" onclick="callGoToFolder('@prevFolder.Path', @prevFolder.Depth)">Folder @prevFolder.Name</a>
        }
    </div>

    <div>
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ImageThumbnail)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ContentName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.IsFolder)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Depth)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FileSize)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Goto)
                </th>
            </tr>

            @foreach (var folder in Model.DropboxFolders)
            {
                <tr>
                    <td>
                        <img src="~/Content/Images/smallFolderThumbnail.png" />
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => folder.Name)
                    </td>
                    <td>
                        @{
                            bool isFolder = true;
                        }
                        @Html.DisplayFor(modelItem => isFolder)
                    </td>
                    <td>
                        @{
                            int folderDepth = folder.Depth - 1;
                        }
                        @Html.DisplayFor(modelItem => folderDepth)
                    </td>
                    <td>
                        @{
                            string missingFileSize = "-";
                        }
                        @Html.DisplayFor(modelItem => missingFileSize)
                    </td>
                    <td>
                        <a id="goToFolder" onclick="callGoToFolder('@folder.Path', @folder.Depth)">Browse folder</a>
                    </td>
                </tr>
            }

            @foreach (var file in Model.DropboxFiles)
            {
                <tr>
                    <td>
                        <img src="@String.Format($"data:image/png;base64,{Convert.ToBase64String(file.ThumbnailImage)}")" />
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => file.Name)
                    </td>
                    <td>
                        @{
                            bool isFolder = false;
                        }
                        @Html.DisplayFor(modelItem => isFolder)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => file.Depth)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => file.Size)
                    </td>
                    <td>
                        @Html.ActionLink("Browse file", "ViewDropboxFile", "DropboxContent", new { dropboxFileId = file.PhotographerFileId }, null)
                    </td>
                </tr>
            }
        </table>
    </div>
</div>


@section Scripts{
    <script type="text/javascript">
    function callGoToFolder(path, depth) {
        var url = "@Url.Action("InnerDropboxAccountContents", "DropboxContent")";

        var folderModel = {
            FolderPath: path,
            FolderDepth: depth
        };

        $.ajax({
            type: "POST",
            data: JSON.stringify(folderModel),
            url: url,
            contentType: "application/json"
        }).done(function (res) {
            $("#folderContents").html(res);
        });
    }
    </script>
}

